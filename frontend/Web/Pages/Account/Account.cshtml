@page "/account"
@using frontend
@using frontend.Api.Models
@using frontend.Api.Models.Media
@using frontend.Api.Models.User
@using frontend.Utils
@model frontend.Web.Pages.Account.Account

@{
    Layout = "../_Layout.cshtml";

    var configTask = Program.ApiUtils.GetModelAsync<ModelConfig>(Program.ConfigManager.Config.BackendApiUri + "/services/config");
    ModelUserInfo? userInfo = await CookieUtils.IsCookieUserValid(Program.ApiUtils, Request, Response);
    if (userInfo == null)
    {
        Response.Redirect("/login");
        return;
    }

    var userSearchModel = new ModelMediaSearch
    {
        downloads = false,
        username = userInfo.username,
        api_key = Request.Cookies[CookieUtils.CookieName]
    };

    var userSearchTask = Program.ApiUtils.PostAndReceiveModel<ModelMediaSearch, ModelMediaFound>(Program.ConfigManager.Config.BackendApiUri + "/media/search", userSearchModel);

    ModelConfig? config = await configTask;
    ModelMediaFound? userSearch = await userSearchTask;
}

@section AdditionalHead
{
    <title>Account</title>
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Account.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Information.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Stats.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Posts.css">

    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Container.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Post/Compact.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Post/Tag.css">
}

<!DOCTYPE html>

<html>
<body>

<div class="account-container">
    <div class="account-item information-container">
        <div class="information-item">
            <div class="account-header">
                Settings
            </div>
            <div class="account-buttons">
                <button class="account-button">Reset Username</button>
                <button class="account-button">Reset Password</button>
                <button class="account-button account-button-dangerous">Purge all Posts</button>
                <button class="account-button account-button-dangerous">Delete Account</button>
                <button class="account-button">Logout</button>
            </div>
        </div>
        <div class="information-item">
            <div class="account-header">
                Stats
            </div>
            <div class="stats-container">
                @{
                    <div class="stats-item">
                        <p class="stats-item-name">
                            Name
                        </p>
                        <p class="stats-item-data">
                            @userInfo.username
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Admin
                        </p>
                        <p class="stats-item-data">
                            @(userInfo.admin ? "Yes" : "No")
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Creation Date
                        </p>
                        <p class="stats-item-data">
                            @DateTime.Parse(userInfo.creation_date, null, System.Globalization.DateTimeStyles.RoundtripKind).ToString("MMM dd yyyy")
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Uploads
                        </p>
                        <p class="stats-item-data">
                            @userInfo.uploads.Length / @config?.user_upload_limit
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Stored Data
                        </p>
                        <p class="stats-item-data">
                            @StringUtils.FormatBytesWithIdentifier(userInfo.total_upload_size)
                        </p>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="account-item account-posts">
        <div class="inline-head-container">
            <div class="posts-header">
                My Posts
            </div>
        </div>

        @{
            if (userSearch == null || userSearch.ids.Length == 0)
            {
                <div class="no-posts">
                    <p>No posts were found... Upload something!</p>
                </div>
            }
            else
            {
                <div class="compact-container">
                    @{
                        foreach (var id in userSearch.ids)
                        {
                            ModelContentInfo? contentInfo = await Program.ApiUtils.GetAndReceiveModel<ModelContentInfo>(Program.ConfigManager.Config.BackendApiUri + String.Concat("/media/info?id=", id));
                            if (contentInfo != null)
                            {
                                <a href="/p/@id/" class="compact-reference">
                                    <div class="compact-item">
                                        <div class="compact-thumbnail-container">
                                            <img src="@Url.Action("Thumbnail", "Thumbnail", new {id = id})" class="compact-thumbnail"/>
                                        </div>
                                        <div class="compact-information-container">
                                            <div class="compact-header-container">
                                                <p class="compact-header-title">@contentInfo.content_name</p>
                                                <p class="compact-header-data">@contentInfo.author_username • @StringUtils.FormatBytesWithIdentifier(contentInfo.content_size) • @DateTime.Parse(contentInfo.upload_date, null, System.Globalization.DateTimeStyles.RoundtripKind).ToString("MMM dd yyyy")</p>
                                                <p class="compact-header-data">Downloads • @contentInfo.downloads</p>
                                            </div>
                                            <div class="compact-footer-container">
                                                <div class="tag-container">
                                                    <div class="tag">
                                                        @contentInfo.content_type
                                                    </div>
                                                    @{
                                                        if (contentInfo.tags != null)
                                                        {
                                                            for (int b = 0; b < Math.Min(4, contentInfo.tags.Length); b++)
                                                            {
                                                                string tag = contentInfo.tags[b];
                                                                <div class="tag">
                                                                    @tag
                                                                </div>
                                                            }
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                    }
                </div>
            }
        }
    </div>
</div>

</body>
</html>