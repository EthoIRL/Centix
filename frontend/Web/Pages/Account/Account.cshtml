@page "/account"
@using frontend
@using frontend.Api.Models
@using frontend.Api.Models.User
@using frontend.Utils
@model frontend.Web.Pages.Account.Account

@{
    Layout = "../_Layout.cshtml";

    var configTask = Program.ApiUtils.GetModelAsync<ModelConfig>(Program.ConfigManager.Config.BackendApiUri + "/services/config");
    ModelUserInfo? userInfo = await CookieUtils.IsCookieUserValid(Program.ApiUtils, Request, Response);
    if (userInfo == null)
    {
        Response.Redirect("/login");
        return;
    }

    ModelConfig? config = await configTask;
}

@section AdditionalHead
{
    <title>Account</title>
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Account.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Information.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Posts.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Account/Stats.css">
}

<!DOCTYPE html>

<html>
<body>

<div class="account-container">
    <div class="account-item information-container">
        <div class="information-item">
            <div class="account-header">
                Settings
            </div>
            <div class="account-buttons">
                <button class="account-button">Reset Username</button>
                <button class="account-button">Reset Password</button>
                <button class="account-button account-button-dangerous">Purge all Posts</button>
                <button class="account-button account-button-dangerous">Delete Account</button>
                <button class="account-button">Logout</button>
            </div>
        </div>
        <div class="information-item">
            <div class="account-header">
                Stats
            </div>
            <div class="stats-container">
                @{
                    <div class="stats-item">
                        <p class="stats-item-name">
                            Name
                        </p>
                        <p class="stats-item-data">
                            @userInfo.username
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Admin
                        </p>
                        <p class="stats-item-data">
                            @(userInfo.admin ? "Yes" : "No")
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Creation Date
                        </p>
                        <p class="stats-item-data">
                            @DateTime.Parse(userInfo.creation_date, null, System.Globalization.DateTimeStyles.RoundtripKind).ToString("MMM dd yyyy")
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Uploads
                        </p>
                        <p class="stats-item-data">
                            @userInfo.uploads.Length / @config?.user_upload_limit
                        </p>
                    </div>

                    <div class="stats-item">
                        <p class="stats-item-name">
                            Stored Data
                        </p>
                        <p class="stats-item-data">
                            @StringUtils.FormatBytesWithIdentifier(userInfo.total_upload_size)
                        </p>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="account-item your-post-container">
        <div class="account-header">
            My Posts
        </div>

    </div>
</div>

</body>
</html>