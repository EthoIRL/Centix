@page
@using frontend
@using frontend.Api.Models
@using frontend.Api.Models.Media
@using frontend.Api.Models.Stats
@using frontend.Api.Models.User
@using frontend.Utils
@model frontend.Web.Pages.Index

@{
    Layout = "_Layout.cshtml";

    ModelMediaStats? mediaStats = await Program.ApiUtils.GetModelAsync<ModelMediaStats>(Program.ConfigManager.Config.BackendApiUri + "/stats/media/");
    ModelUserStats? userStats = await Program.ApiUtils.GetModelAsync<ModelUserStats>(Program.ConfigManager.Config.BackendApiUri + "/stats/user/");

    bool apiDown = mediaStats == null && userStats == null;

    int totalContentCount = 0;
    string totalContentSize = "0 MB";

    if (mediaStats != null)
    {
        totalContentCount = mediaStats.media_count;
        totalContentSize = StringUtils.FormatBytesWithIdentifier(mediaStats.media_storage_usage);
    }

    int totalUserCount = 0;

    if (userStats != null)
    {
        totalUserCount = userStats.user_count;
    }

    ModelMediaFound? mediaFound = null;
    ModelInformation? information = null;
    ModelConfig? config = null;

    ModelUserInfo? userInfo = null;
    if (!apiDown)
    {
        information = await Program.ApiUtils.GetModelAsync<ModelInformation>(Program.ConfigManager.Config.BackendApiUri + "/services/information");
        config = await Program.ApiUtils.GetModelAsync<ModelConfig>(Program.ConfigManager.Config.BackendApiUri + "/services/config");

        if (CookieUtils.IsCookieReal(Request, Response))
        {
            var userCredentials = new ModelUserKey
            {
                key = Request.Cookies[CookieUtils.CookieName]
            };

            userInfo = await Program.ApiUtils.PostAndReceiveModel<ModelUserKey, ModelUserInfo>(
                Program.ConfigManager.Config.BackendApiUri + "/user/info", userCredentials);
        }

        var searchModel = new ModelMediaSearch
        {
            downloads = true
        };

        mediaFound = await Program.ApiUtils.PostAndReceiveModel<ModelMediaSearch, ModelMediaFound>(Program.ConfigManager.Config.BackendApiUri + "/media/search", searchModel);
    }
}

@section AdditionalHead
{
    <title>Home</title>
    <link rel="stylesheet" href="~/Web/Assets/css/Index/Index.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Index/Stats.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Index/Content.css">
}

<!DOCTYPE html>

<html lang="en">
<body>
<div class="page-container">
    <div class="stats-container">
        <div class="stats-inner-container">
            @{
                if (userInfo != null)
                {
                    <div class="stats-info-container">
                        <text class="stats-header">Welcome, @userInfo.username.ToUpper()</text>
                        <ul class="stats-list">
                            <li>
                                @{
                                    if (config?.user_upload_limit > 0 && !userInfo.admin)
                                    {
                                        <text>@userInfo.uploads.Length / @config?.user_upload_limit Files Uploaded</text>
                                    }
                                    else
                                    {
                                        <text>@userInfo.uploads.Length / Unlimited Uploads</text>
                                    }
                                }
                            </li>
                            <li>
                                @{
                                    if (config?.user_total_upload_size_limit > 0 && !userInfo.admin)
                                    {
                                        <text>@StringUtils.FormatBytesWithIdentifier(userInfo.total_upload_size) /
                                            @{
                                        <text>@config.user_total_upload_size_limit</text>
                                            }
                                            mb(s) Stored</text>
                                    }
                                    else
                                    {
                                        <text>@StringUtils.FormatBytesWithIdentifier(userInfo.total_upload_size) / Unlimited Stored</text>
                                    }
                                }
                            </li>
                            <li>
                                @{
                                    if (userInfo.admin)
                                    {
                                        <text>Unlimited</text>
                                    }
                                    else
                                    {
                                        <text>@config?.user_upload_size_limit MB</text>
                                    }
                                }
                                / Upload Size
                            </li>
                        </ul>
                    </div>
                }
            }

            <div class="stats-info-container">
                <text class="stats-header">Instance Stats</text>
                <ul class="stats-list">
                    <li>
                        Api:
                        @{
                            if (apiDown)
                            {
                                <a style="color: red">Offline</a>
                            }
                            else
                            {
                                <a style="color: green">Online</a>
                            }
                        }
                    </li>
                    <li>
                        Serving @totalContentCount Uploads
                    </li>
                    <li>
                        Handling @totalUserCount Users
                    </li>
                    <li>
                        Storing @totalContentSize
                    </li>
                    @{
                        if (config?.media_allow_editing != null)
                        {
                            <li>
                                Editing @(config.media_allow_editing ? "Allowed" : "Disallowed")
                            </li>
                        }
                    }
                </ul>

                @{
                    if (config?.backend_domains.Length > 1)
                    {
                        <div class="stats-domain-container">
                            <text class="domain-header">DOMAINS</text>
                            <ul class="domain-list">
                                @{
                                    foreach (var domain in config.backend_domains)
                                    {
                                        <li>
                                            @domain
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                }
            </div>

            <div class="stats-backend-container">
                <div class="stats-footer-text">
                    <text>
                        Build -
                        <a href="https://github.com/EthoIRL/Centix">
                            @(information != null ? information.git_version : "Unknown")
                        </a>
                    </text>
                </div>
            </div>
        </div>
    </div>
    <div class="main-content-container">
        @{
            if (mediaFound != null && mediaFound.ids.Length > 0)
            {
                <div class="content-container">
                    <div class="content-header">
                        Popular content
                    </div>
                    <div class="content-flex-list">
                        @{
                            if (mediaFound.ids.Length > 0)
                            {
                                for (int b = 0; b < Math.Min(10, mediaFound.ids.Length); b++)
                                {
                                    var id = mediaFound.ids[b];
                                    ModelContentInfo? contentInfo = await Program.ApiUtils.GetAndReceiveModel<ModelContentInfo>(Program.ConfigManager.Config.BackendApiUri + String.Concat("/media/info?id=", id));
                                    if (contentInfo != null)
                                    {
                                        <a class="content-item" href="/p/@id">
                                            <img src="@Url.Action("Thumbnail", "Thumbnail", new {id = id})" class="content-img" loading="lazy"/>
                                            <div class="content-tags-container">
                                                <div class="content-tag">
                                                    @contentInfo.content_type
                                                </div>
                                                @{
                                                    if (contentInfo.tags != null)
                                                    {
                                                        for (int i = 0; i < Math.Min(4, contentInfo.tags.Length); i++)
                                                        {
                                                            string tag = contentInfo.tags[i];
                                                            <div class="content-tag">@tag</div>
                                                        }
                                                    }
                                                }
                                            </div>
                                            <div class="content-item-text">
                                                @{
                                        <text>@contentInfo.content_name.Substring(0, Math.Min(16, contentInfo.content_name.Length))</text>
                                                    if (contentInfo.content_name.Length > 16)
                                                    {
                                                        <text>...</text>
                                                    }
                                                }
                                                • @contentInfo.author_username • @contentInfo.downloads
                                                <img src="~/Web/Assets/imgs/Index/download.png" alt="downloads" loading="lazy"/>
                                            </div>
                                        </a>
                                    }
                                }
                            }
                            else
                            {
                                <div class="content-no-available">
                                    No content found! Become the first person to upload!
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>
</body>
</html>