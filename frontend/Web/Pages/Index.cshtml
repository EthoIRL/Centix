@page
@using frontend
@using frontend.Api.Models
@using frontend.Api.Models.Media
@using frontend.Api.Models.Stats
@using frontend.Api.Models.User
@using frontend.Utils
@model frontend.Web.Pages.Index

@{
    Layout = "_Layout.cshtml";

    var mediaTask = Program.ApiUtils.GetModelAsync<ModelMediaStats>(Program.ConfigManager.Config.BackendApiUri + "/stats/media/");
    var userTask = Program.ApiUtils.GetModelAsync<ModelUserStats>(Program.ConfigManager.Config.BackendApiUri + "/stats/user/");

    var popularSearchModel = new ModelMediaSearch
    {
        downloads = true
    };

    var informationTask = Program.ApiUtils.GetModelAsync<ModelInformation>(Program.ConfigManager.Config.BackendApiUri + "/services/information");
    var configTask = Program.ApiUtils.GetModelAsync<ModelConfig>(Program.ConfigManager.Config.BackendApiUri + "/services/config");
    var userInfoTask = CookieUtils.IsCookieUserValid(Program.ApiUtils, Request, Response);
    var popularSearchTask = Program.ApiUtils.PostAndReceiveModel<ModelMediaSearch, ModelMediaFound>(Program.ConfigManager.Config.BackendApiUri + "/media/search", popularSearchModel);
    
    ModelMediaStats? mediaStats = await mediaTask;
    ModelUserStats? userStats = await userTask;

    ModelInformation? information = await informationTask;
    ModelConfig? config = await configTask;
    ModelUserInfo? userInfo = await userInfoTask;
    ModelMediaFound? popularPosts = await popularSearchTask;

    bool apiDown = mediaStats == null && userStats == null;

    int totalContentCount = 0;
    string totalContentSize = "0 MB";

    if (mediaStats != null)
    {
        totalContentCount = mediaStats.media_count;
        totalContentSize = StringUtils.FormatBytesWithIdentifier(mediaStats.media_storage_usage);
    }

    int totalUserCount = 0;

    if (userStats != null)
    {
        totalUserCount = userStats.user_count;
    }
}

@section AdditionalHead
{
    <title>Home</title>
    <link rel="stylesheet" href="~/Web/Assets/css/Index/Index.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Index/Stats.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Index/Content.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Index/Announcement.css">

    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Container.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Post/Compact.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Post/Tag.css">
}

<!DOCTYPE html>

<html lang="en">
<body>
<div class="page-container">
<div class="stats-container">
    <div class="stats-inner-container">
        @{
            if (userInfo != null)
            {
                <div class="stats-info-container">
                    <text class="stats-header">Welcome, @userInfo.username.ToUpper()</text>
                    <ul class="stats-list">
                        <li>
                            @{
                                if (config?.user_upload_limit > 0 && !userInfo.admin)
                                {
                                    <text>@userInfo.uploads.Length / @config?.user_upload_limit Files Uploaded</text>
                                }
                                else
                                {
                                    <text>@userInfo.uploads.Length / Unlimited Uploads</text>
                                }
                            }
                        </li>
                        <li>
                            @{
                                if (config?.user_total_upload_size_limit > 0 && !userInfo.admin)
                                {
                                    <text>@StringUtils.FormatBytesWithIdentifier(userInfo.total_upload_size) /
                                        @{
                                    <text>@config.user_total_upload_size_limit</text>
                                        }
                                        mb(s) Stored</text>
                                }
                                else
                                {
                                    <text>@StringUtils.FormatBytesWithIdentifier(userInfo.total_upload_size) / Unlimited Stored</text>
                                }
                            }
                        </li>
                        <li>
                            @{
                                if (userInfo.admin)
                                {
                                    <text>Unlimited</text>
                                }
                                else
                                {
                                    <text>@config?.user_upload_size_limit MB</text>
                                }
                            }
                            / Upload Size
                        </li>
                    </ul>
                </div>
            }
        }

        <div class="stats-info-container">
            <text class="stats-header">Instance Stats</text>
            <ul class="stats-list">
                <li>
                    Api:
                    @{
                        if (apiDown)
                        {
                            <a style="color: red">Offline</a>
                        }
                        else
                        {
                            <a style="color: green">Online</a>
                        }
                    }
                </li>
                <li>
                    Serving @totalContentCount Uploads
                </li>
                <li>
                    Handling @totalUserCount Users
                </li>
                <li>
                    Storing @totalContentSize
                </li>
                @{
                    if (config?.media_allow_editing != null)
                    {
                        <li>
                            Editing @(config.media_allow_editing ? "Allowed" : "Disallowed")
                        </li>
                    }
                }
            </ul>

            @{
                if (config?.backend_domains.Length > 1)
                {
                    <div class="stats-domain-container">
                        <text class="domain-header">AVAILABLE DOMAINS</text>
                        <ul class="domain-list">
                            @{
                                foreach (var domain in config.backend_domains)
                                {
                                    <li>
                                        @domain
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                }
            }
        </div>

        <div class="stats-backend-container">
            <div class="stats-footer-text">
                <text>
                    Build -
                    <a href="https://github.com/EthoIRL/Centix">
                        @(information != null ? information.git_version : "Unknown")
                    </a>
                </text>
            </div>
        </div>
    </div>
</div>
<div class="main-content-container">
    @{
        if (apiDown)
        {
            <div class="announcement-container">
                <div class="main-header announcement-header">
                    Service Down
                </div>

                <div class="announcement-list">
                    <div>
                        The backend server cannot be reached!
                        Please refresh or comeback later if the issue persists.
                    </div>
                </div>
            </div>
        }
        
        if (Program.ConfigManager.Config.Announcements.Length > 0)
        {
            <div class="announcement-container">
                <div class="main-header announcement-header">
                    Announcements
                </div>

                <div class="announcement-list">
                    @{
                        foreach (var announcement in Program.ConfigManager.Config.Announcements)
                        {
                            <div>
                                @Html.Raw(announcement)
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }

    @{
        if (popularPosts != null && popularPosts.ids.Length > 0)
        {
            <div class="post-container">
                <div class="posts-item post-dynamic-margin">
                    <div class="inline-head-container">
                        <div class="posts-header">
                            Popular Posts
                        </div>
                        
                        <div id="more-posts">
                            <a href="/posts/" class="more-post-item">
                                More Posts
                            </a>
                        </div>
                    </div>

                    <div class="compact-container">
                        @{
                            for (int c = 0; c < Math.Min(4, popularPosts.ids.Length); c++)
                            {
                                var id = popularPosts.ids[c];
                                ModelContentInfo? contentInfo = await Program.ApiUtils.GetAndReceiveModel<ModelContentInfo>(Program.ConfigManager.Config.BackendApiUri + String.Concat("/media/info?id=", id));
                                if (contentInfo != null)
                                {
                                    <a href="/p/@id/" class="compact-reference">
                                        <div class="compact-item">
                                            <div class="compact-thumbnail-container">
                                                <img src="@Url.Action("Thumbnail", "Thumbnail", new {id = id})" class="compact-thumbnail"/>
                                            </div>
                                            <div class="compact-information-container">
                                                <div class="compact-header-container">
                                                    <p class="compact-header-title">@contentInfo.content_name</p>
                                                    <p class="compact-header-data">@contentInfo.author_username • @StringUtils.FormatBytesWithIdentifier(contentInfo.content_size) • @DateTime.Parse(contentInfo.upload_date, null, System.Globalization.DateTimeStyles.RoundtripKind).ToString("MMM dd yyyy")</p>
                                                    <p class="compact-header-data">Downloads • @contentInfo.downloads</p>
                                                </div>
                                                <div class="compact-footer-container">
                                                    <div class="tag-container">
                                                        <div class="tag">
                                                            @contentInfo.content_type
                                                        </div>
                                                        @{
                                                            if (contentInfo.tags != null)
                                                            {
                                                                for (int b = 0; b < Math.Min(4, contentInfo.tags.Length); b++)
                                                                {
                                                                    string tag = contentInfo.tags[b];
                                                                    <div class="tag">
                                                                        @tag
                                                                    </div>
                                                                }
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </a>
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>
</div>
</body>
</html>