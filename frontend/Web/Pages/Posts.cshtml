@page
@using frontend
@using frontend.Api.Models
@using frontend.Api.Models.Media
@using frontend.Api.Models.User
@using frontend.Utils
@model frontend.Web.Pages.Posts

@{
    Layout = "_Layout.cshtml";

    var popularSearchModel = new ModelMediaSearch
    {
        downloads = true
    };

    var popularSearchTask = Program.ApiUtils.PostAndReceiveModel<ModelMediaSearch, ModelMediaFound>(Program.ConfigManager.Config.BackendApiUri + "/media/search", popularSearchModel);
    var generalSearchTask = Program.ApiUtils.PostAndReceiveModel<ModelMediaSearch, ModelMediaFound>(Program.ConfigManager.Config.BackendApiUri + "/media/search", new ModelMediaSearch());
    var userInfoTask = CookieUtils.IsCookieUserValid(Program.ApiUtils, Request, Response);

    ModelMediaFound? generalSearch = await generalSearchTask;
    bool postsAvailable = generalSearch != null && generalSearch.ids.Length > 0;

    ModelMediaFound? popularSearch = null;
    ModelUserInfo? userInfo = await userInfoTask;
    ModelMediaFound? userSearch = null;

    if(postsAvailable) {
        popularSearch = await popularSearchTask;
    }

    if (userInfo != null)
    {
        var userSearchModel = new ModelMediaSearch
        {
            downloads = true,
            username = userInfo.username,
            api_key = Request.Cookies[CookieUtils.CookieName]
        };

        userSearch = await Program.ApiUtils.PostAndReceiveModel<ModelMediaSearch, ModelMediaFound>(Program.ConfigManager.Config.BackendApiUri + "/media/search", userSearchModel);
    }

    bool isApiDown = generalSearch == null;
}

@section AdditionalHead
{
    <title>Posts @(generalSearch == null ? "" : "- " + generalSearch.ids.Length)</title>
    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Container.css">

    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Post/Compact.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Generic/Post/Tag.css">

    <link rel="stylesheet" href="~/Web/Assets/css/Posts/Uploads.css">
    <link rel="stylesheet" href="~/Web/Assets/css/Posts/Sorting.css">

    <link rel="stylesheet" href="~/Web/Assets/css/Posts/Posts.css">

    <script src="~/Web/Assets/js/Posts/Posts.js"></script>
}

<!DOCTYPE html>

<html>
<body>
<div class="post-container">
@{
    if (!isApiDown && popularSearch != null)
    {
        <div class="posts-item posts-item-margin">
            <div class="inline-head-container">
                <div class="posts-header">
                    Popular Posts
                </div>
            </div>

            <div class="compact-container">
                @{
                    for (int c = 0; c < Math.Min(5, popularSearch.ids.Length); c++)
                    {
                        var id = popularSearch.ids[c];
                        ModelContentInfo? contentInfo = await Program.ApiUtils.GetAndReceiveModel<ModelContentInfo>(Program.ConfigManager.Config.BackendApiUri + String.Concat("/media/info?id=", id));
                        if (contentInfo != null)
                        {
                            <a href="/p/@id/" class="compact-reference">
                                <div class="compact-item">
                                    <div class="compact-thumbnail-container">
                                        <img src="@Url.Action("Thumbnail", "Thumbnail", new {id = id})" class="compact-thumbnail"/>
                                    </div>
                                    <div class="compact-information-container">
                                        <div class="compact-header-container">
                                            <p class="compact-header-title">@contentInfo.content_name</p>
                                            <p class="compact-header-data">@contentInfo.author_username • @StringUtils.FormatBytesWithIdentifier(contentInfo.content_size) • @DateTime.Parse(contentInfo.upload_date, null, System.Globalization.DateTimeStyles.RoundtripKind).ToString("MMM dd yyyy")</p>
                                            <p class="compact-header-data">Downloads • @contentInfo.downloads</p>
                                        </div>
                                        <div class="compact-footer-container">
                                            <div class="tag-container">
                                                <div class="tag">
                                                    @contentInfo.content_type
                                                </div>
                                                @{
                                                    if (contentInfo.tags != null)
                                                    {
                                                        for (int b = 0; b < Math.Min(4, contentInfo.tags.Length); b++)
                                                        {
                                                            string tag = contentInfo.tags[b];
                                                            <div class="tag">
                                                                @tag
                                                            </div>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        }
                    }
                }
            </div>
        </div>
    }
}

@{
    if (!isApiDown && userSearch?.ids.Length > 0)
    {
        <div class="posts-item posts-item-margin">
            <div class="inline-head-container">
                <div class="posts-header">
                    Your Popular Posts
                </div>
            </div>

            <div class="compact-container">
                @{
                    for (int c = 0; c < Math.Min(5, userSearch.ids.Length); c++)
                    {
                        var id = userSearch.ids[c];
                        ModelContentInfo? contentInfo = await Program.ApiUtils.GetAndReceiveModel<ModelContentInfo>(Program.ConfigManager.Config.BackendApiUri + String.Concat("/media/info?id=", id));
                        if (contentInfo != null)
                        {
                            <a href="/p/@id/" class="compact-reference">
                                <div class="compact-item">
                                    <div class="compact-thumbnail-container">
                                        <img src="@Url.Action("Thumbnail", "Thumbnail", new {id = id})" class="compact-thumbnail"/>
                                    </div>
                                    <div class="compact-information-container">
                                        <div class="compact-header-container">
                                            <p class="compact-header-title">@contentInfo.content_name</p>
                                            <p class="compact-header-data">@contentInfo.author_username • @StringUtils.FormatBytesWithIdentifier(contentInfo.content_size) • @DateTime.Parse(contentInfo.upload_date, null, System.Globalization.DateTimeStyles.RoundtripKind).ToString("MMM dd yyyy")</p>
                                            <p class="compact-header-data">Downloads • @contentInfo.downloads</p>
                                        </div>
                                        <div class="compact-footer-container">
                                            <div class="tag-container">
                                                <div class="tag">
                                                    @contentInfo.content_type
                                                </div>
                                                @{
                                                    if (contentInfo.tags != null)
                                                    {
                                                        for (int b = 0; b < Math.Min(4, contentInfo.tags.Length); b++)
                                                        {
                                                            string tag = contentInfo.tags[b];
                                                            <div class="tag">
                                                                @tag
                                                            </div>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        }
                    }
                }
            </div>
        </div>
    }
}

<div class="posts-item posts-item-margin">
    <div class="inline-head-container">
        <div class="posts-header">
            Public Posts @(!postsAvailable ? "" : "- " + generalSearch!.ids.Length)
        </div>

        @{
            if (postsAvailable)
            {
                <div id="post-sort-options">
                    <a onclick="clearSortingParams(window);" id="default-sort" class="sort-item @{ if (Request.Query.Count == 0) { <text>sort-selected</text> } }">
                        Recent
                    </a>
                    <a onclick="updateQueryURL('downloads', window);" class="sort-item cursor-sort @{ if (QueryUtils.IsSelectedFromSortQuery(Request.Query, "downloads")) { <text>sort-selected</text> } }">
                        Downloads
                    </a>
                </div>
            }
        }
    </div>

    @{
        if (!postsAvailable)
        {
            <div class="no-posts">
                @{
                    if (isApiDown)
                    {
                        <p>No posts could be located due to backend connection issues... wait patiently...</p>
                    }
                    else
                    {
                        <p>No posts were found to have been publicly uploaded!</p>
                        <p>
                            Become the first person to <a href="/signup/">upload</a> publicly!
                        </p>
                    }
                }
            </div>
        }
        else
        {
            <div class="compact-container">
                @{
                    List<(ModelContentInfo, string)> contentList = new List<(ModelContentInfo, string)>();
                    foreach (var id in generalSearch.ids)
                    {
                        ModelContentInfo? contentInfo = await Program.ApiUtils.GetAndReceiveModel<ModelContentInfo>(Program.ConfigManager.Config.BackendApiUri + String.Concat("/media/info?id=", id));
                        if (contentInfo != null)
                        {
                            contentList.Add(new(contentInfo, id));
                        }
                    }

                    contentList.Sort((content1, content2) =>
                    {
                        var date1 = DateTime.Parse(content1.Item1.upload_date, null, System.Globalization.DateTimeStyles.RoundtripKind);
                        var date2 = DateTime.Parse(content2.Item1.upload_date, null, System.Globalization.DateTimeStyles.RoundtripKind);

                        return DateTime.Compare(date2, date1);
                    });

                    if (QueryUtils.IsSelectedFromSortQuery(Request.Query, "downloads"))
                    {
                        contentList.Sort((s, s2) => s2.Item1.downloads - s.Item1.downloads);
                    }

                    foreach (var content in contentList)
                    {
                        var contentInfo = content.Item1;
                        var id = content.Item2;

                        <a href="/p/@id/" class="compact-reference">
                            <div class="compact-item">
                                <div class="compact-thumbnail-container">
                                    <img src="@Url.Action("Thumbnail", "Thumbnail", new {id = id})" class="compact-thumbnail"/>
                                </div>
                                <div class="compact-information-container">
                                    <div class="compact-header-container">
                                        <p class="compact-header-title">@contentInfo.content_name</p>
                                        <p class="compact-header-data">@contentInfo.author_username • @StringUtils.FormatBytesWithIdentifier(contentInfo.content_size) • @DateTime.Parse(contentInfo.upload_date, null, System.Globalization.DateTimeStyles.RoundtripKind).ToString("MMM dd yyyy")</p>
                                        <p class="compact-header-data">Downloads • @contentInfo.downloads</p>
                                    </div>
                                    <div class="compact-footer-container">
                                        <div class="tag-container">
                                            <div class="tag">
                                                @contentInfo.content_type
                                            </div>
                                            @{
                                                if (contentInfo.tags != null)
                                                {
                                                    for (int b = 0; b < Math.Min(4, contentInfo.tags.Length); b++)
                                                    {
                                                        string tag = contentInfo.tags[b];
                                                        <div class="tag">
                                                            @tag
                                                        </div>
                                                    }
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </a>
                    }
                }
            </div>
        }
    }
</div>
</div>
</body>
</html>